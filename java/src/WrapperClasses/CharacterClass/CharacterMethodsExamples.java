package WrapperClasses.CharacterClass;

import java.util.Arrays;

public class CharacterMethodsExamples {
    public static void main(String[] args) {
        char ch = 'A';
        char ch1 = 'X';
        char ch2 = '3';
        char ch3 = 'Â•Ω';
        char ch4 = '$';
        char ch5 = '\n';
        char ch6 = 'i';
        char ch7 = '(';
        char ch8 = 'F';

        // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É valueOf –∑ —Ü–∏—Ñ—Ä–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
        int num = 65;
        Character charObject = Character.valueOf((char) num);
        System.out.println("–û–±'—î–∫—Ç Character: " + charObject);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–æ—é
        boolean isDigit = Character.isDigit(ch);
        System.out.println("–Ñ —Ü–∏—Ñ—Ä–æ—é: " + isDigit);

        // –ú–µ—Ç–æ–¥ reverseBytes - –∑–º—ñ–Ω–∞ –ø–æ—Ä—è–¥–∫—É –±–∞–π—Ç—ñ–≤ —Å–∏–º–≤–æ–ª—É
        char originalChar = 'A';
        char reversedChar = Character.reverseBytes(originalChar);
        System.out.println("–°–∏–º–≤–æ–ª: " + originalChar);
        System.out.println("–°–∏–º–≤–æ–ª –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º –±–∞–π—Ç—ñ–≤: " + reversedChar);

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –Ω–∞ –π–æ–≥–æ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–∫–æ–¥ Unicode)
        int numericValue = Character.getNumericValue(ch);
        System.out.println("–ß–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–∫–æ–¥ Unicode): " + numericValue);

        // –ú–µ—Ç–æ–¥ isDefined - –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ Unicode
        boolean isDefined1 = Character.isDefined(ch1);
        boolean isDefined2 = Character.isDefined(ch2);
        System.out.println(ch1 + " –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–º–≤–æ–ª: " + isDefined1);
        System.out.println(ch2 + " –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–º–≤–æ–ª: " + isDefined2);

        // –ú–µ—Ç–æ–¥ charCount - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ UTF-16 –∫–æ–¥—ñ–≤, —è–∫—ñ —Å–∫–ª–∞–¥–∞—é—Ç—å —Å–∏–º–≤–æ–ª
        char unicodeChar = '\u2764'; // –°–∏–º–≤–æ–ª —Å–µ—Ä—Ü—è (‚ù§)
        int charCount = Character.charCount(unicodeChar);
        System.out.println("–°–∏–º–≤–æ–ª: " + unicodeChar);
        System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å UTF-16 –∫–æ–¥—ñ–≤: " + charCount);

        // –ú–µ—Ç–æ–¥ toChars - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å–∏–º–≤–æ–ª—É –≤ –º–∞—Å–∏–≤ UTF-16 –∫–æ–¥—ñ–≤
        char toChars = 'A';
        char[] charArray = Character.toChars(toChars);
        System.out.println("–°–∏–º–≤–æ–ª: " + originalChar);
        System.out.println("–ú–∞—Å–∏–≤ UTF-16 –∫–æ–¥—ñ–≤: " + Arrays.toString(charArray));

        // –ú–µ—Ç–æ–¥ isISOControl - –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª —î —Å–∏–º–≤–æ–ª–æ–º ISO Control
        boolean isISOControl1 = Character.isISOControl(ch5);
        boolean isISOControl2 = Character.isISOControl(ch6);
        System.out.println(ch5 + " —î —Å–∏–º–≤–æ–ª–æ–º ISO Control: " + isISOControl1);
        System.out.println(ch6 + " —î —Å–∏–º–≤–æ–ª–æ–º ISO Control: " + isISOControl2);

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        char randomChar = Character.forDigit((int) (Math.random() * 10), 10);
        System.out.println("–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–∏–º–≤–æ–¥: " + randomChar);

        // –ú–µ—Ç–æ–¥ digit - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É
        int numericValueDigit = Character.digit(ch, 10);
        System.out.println("–ß–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É " + ch + ": " + numericValueDigit);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –ª—ñ—Ç–µ—Ä–æ—é
        boolean isLetter = Character.isLetter(ch);
        System.out.println("–Ñ –ª—ñ—Ç–µ—Ä–æ—é: " + isLetter);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏ –∞–±–æ —Ü–∏—Ñ—Ä–∞–º–∏
        boolean isLetterOrDigit1 = Character.isLetterOrDigit(ch1);
        boolean isLetterOrDigit2 = Character.isLetterOrDigit(ch2);
        System.out.println("ch1 —î –ª—ñ—Ç–µ—Ä–æ—é —á–∏ —Ü–∏—Ñ—Ä–æ—é: " + isLetterOrDigit1);
        System.out.println("ch2 —î –ª—ñ—Ç–µ—Ä–æ—é —á–∏ —Ü–∏—Ñ—Ä–æ—é: " + isLetterOrDigit2);

        // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞ —ó—Ö –≤—ñ–¥–Ω–æ—Å–Ω–∏–º –ø–æ—Ä—è–¥–∫–æ–º
        int compareResult = Character.compare(ch1, ch2);
        System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: " + compareResult);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª —î –±—É–∫–≤–æ—é –≤ –º–æ–≤—ñ Java
        boolean isJavaLetter1 = Character.isJavaLetter(ch1);
        boolean isJavaLetter2 = Character.isJavaLetter(ch2);
        System.out.println(ch1 + " —î –±—É–∫–≤–æ—é –≤ –º–æ–≤—ñ Java: " + isJavaLetter1);
        System.out.println(ch2 + " —î –±—É–∫–≤–æ—é –≤ –º–æ–≤—ñ Java: " + isJavaLetter2);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª —î –±—É–∫–≤–æ—é –∞–±–æ —Ü–∏—Ñ—Ä–æ—é –≤ –º–æ–≤—ñ Java
        boolean isJavaLetterOrDigit1 = Character.isJavaLetterOrDigit(ch1);
        boolean isJavaLetterOrDigit2 = Character.isJavaLetterOrDigit(ch2);
        System.out.println(ch1 + " —î –±—É–∫–≤–æ—é –∞–±–æ —Ü–∏—Ñ—Ä–æ—é –≤ –º–æ–≤—ñ Java: " + isJavaLetterOrDigit1);
        System.out.println(ch2 + " —î –±—É–∫–≤–æ—é –∞–±–æ —Ü–∏—Ñ—Ä–æ—é –≤ –º–æ–≤—ñ Java: " + isJavaLetterOrDigit2);

        //–û—Ç—Ä–∏–º—É—î –Ω–∞–ø—Ä—è–º–æ–∫ —Å–∏–º–≤–æ–ª—É
        byte directionality = Character.getDirectionality(ch3);
        System.out.println("–ù–∞–ø—Ä—è–º–æ–∫ —Å–∏–º–≤–æ–ª—É " + ch3 + ": " + directionality);

        // –û—Ç—Ä–∏–º—É—î —Ç–∏–ø —Å–∏–º–≤–æ–ª—É
        int type1 = Character.getType(ch1);
        int type2 = Character.getType(ch2);
        System.out.println("–¢–∏–ø —Å–∏–º–≤–æ–ª—É " + ch1 + ": " + type1);
        System.out.println("–¢–∏–ø —Å–∏–º–≤–æ–ª—É " + ch2 + ": " + type2);

        // –ú–µ—Ç–æ–¥ isAlphabetic - –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª —î –ª—ñ—Ç–µ—Ä–æ—é
        boolean isAlphabetic1 = Character.isAlphabetic(ch1);
        boolean isAlphabetic2 = Character.isAlphabetic(ch2);
        System.out.println(ch1 + " —î –ª—ñ—Ç–µ—Ä–æ—é: " + isAlphabetic1);
        System.out.println(ch2 + " —î –ª—ñ—Ç–µ—Ä–æ—é: " + isAlphabetic2);


        // –ú–µ—Ç–æ–¥ isIdeographic - –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª —î —ñ–¥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º (–ª–æ–≥–æ–≥—Ä–∞–º–æ—é)
        boolean isIdeographic1 = Character.isIdeographic(ch3);
        boolean isIdeographic2 = Character.isIdeographic(ch4);
        System.out.println(ch3 + " —î —ñ–¥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º: " + isIdeographic1);
        System.out.println(ch4 + " —î —ñ–¥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º: " + isIdeographic2);


        // –ú–µ—Ç–æ–¥ isMirrored - –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å–∏–º–≤–æ–ª –º–∞—î –¥–∑–µ—Ä–∫–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        boolean isMirrored1 = Character.isMirrored(ch7);
        boolean isMirrored2 = Character.isMirrored(ch8);
        System.out.println(ch7 + " –º–∞—î –¥–∑–µ—Ä–∫–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: " + isMirrored1);
        System.out.println(ch8 + " –º–∞—î –¥–∑–µ—Ä–∫–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: " + isMirrored2);

        //–ü–†–û–ë–Ü–õ
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—å–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
        boolean isWhitespace = Character.isWhitespace(ch);
        System.out.println("—î –ø—Ä–æ–±—ñ–ª—å–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º:" + isWhitespace);
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î –ø—Ä–æ–±—ñ–ª–æ–º
        boolean isSpaceChar = Character.isSpaceChar(ch);
        System.out.println(ch1 + "—î –ø—Ä–æ–±—ñ–ª–æ–º: " + isSpaceChar);

        //–†–ï–ì–Ü–°–¢–†–ò
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –Ω–∞ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
        char lowerCaseCh = Character.toLowerCase(ch);
        System.out.println("–ù–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä: " + lowerCaseCh);

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –Ω–∞ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
        char upperCaseCh = Character.toUpperCase(ch);
        System.out.println("–í–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä: " + upperCaseCh);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î –º–∞–ª–æ—é –ª—ñ—Ç–µ—Ä–æ—é
        boolean isLowerCase = Character.isLowerCase(ch);
        System.out.println(ch1 + " —î –º–∞–ª–æ—é –ª—ñ—Ç–µ—Ä–æ—é: " + isLowerCase);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î –≤–µ–ª–∏–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é
        boolean isUpperCase = Character.isUpperCase(ch);
        System.out.println(ch1 + " —î –≤–µ–ª–∏–∫–æ—é –ª—ñ—Ç–µ—Ä–æ—é: " + isUpperCase);



        /*–ú–µ—Ç–æ–¥ Character.isBmpCodePoint –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏,
         —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –∑–∞–¥–∞–Ω–∞ –∫–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ (code point) –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó –º—É–ª—å—Ç–∏–±–∞–π—Ç–æ–≤–æ—ó
         –ø–ª–æ—â–∏–Ω–∏ (BMP) Unicode.*/
        int codePoint1 = 65; // –ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ —Å–∏–º–≤–æ–ª—É 'A'
        int codePoint2 = 128169; // –ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ —Å–∏–º–≤–æ–ª—É 'üåπ'

        boolean isBmpCodePoint1 = Character.isBmpCodePoint(codePoint1);
        boolean isBmpCodePoint2 = Character.isBmpCodePoint(codePoint2);

        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ BMP 1: " + isBmpCodePoint1);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ BMP 2: " + isBmpCodePoint2);

        /* –ú–µ—Ç–æ–¥ Character.toTitleCase –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –Ω–∞ —Å–∏–º–≤–æ–ª
        –∑ –≤–µ—Ä—Ö–Ω—ñ–º —Ä–µ–≥—ñ—Å—Ç—Ä–æ–º (—Ç–∏—Ç—É–ª—å–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä) –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ª–æ–∫–∞–ª—ñ.*/
        char titleCase = Character.toTitleCase(ch1);
        System.out.println("–¢–∏—Ç—É–ª—å–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä 1: " + titleCase);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î —Å–∏–º–≤–æ–ª–æ–º –∑ –≤–µ–ª–∏–∫–æ—é –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é (Title Case)
        boolean isTitleCase = Character.isTitleCase(ch1);
        System.out.println(ch1 + " —î —Å–∏–º–≤–æ–ª–æ–º –∑ –≤–µ–ª–∏–∫–æ—é –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é (Title Case): " + isTitleCase);


        //–°–£–†–û–ì–ê–¢–ù–Ü –ß–ê–°–¢–ò–ù–ò/–ü–ê–†–ò
        ch1 = '–á';
        ch2 = '—è';
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—â–æ—ó —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É
        char highSurrogate1 = Character.highSurrogate(ch1);
        System.out.println("–í–∏—â–∞ —Å—É—Ä–æ–≥–∞—Ç–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è '" + ch1 + "': " + highSurrogate1);

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∏–∂–Ω—å–æ—ó —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É
        char lowSurrogate2 = Character.lowSurrogate(ch2);
        System.out.println("–ù–∏–∂–Ω—è —Å—É—Ä–æ–≥–∞—Ç–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –¥–ª—è '" + ch2 + "': " + lowSurrogate2);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –Ω–∏–∂–Ω—å–æ—é —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é
        boolean isLowSurrogate1 = Character.isLowSurrogate(ch1);
        System.out.println("'" + ch1 + "' —î –Ω–∏–∂–Ω—å–æ—é —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é: " + isLowSurrogate1);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª –≤–∏—â–æ—é —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é
        boolean isHighSurrogate2 = Character.isHighSurrogate(ch2);
        System.out.println("'" + ch2 + "' —î –≤–∏—â–æ—é —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é: " + isHighSurrogate2);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Å–∏–º–≤–æ–ª —Å—É—Ä–æ–≥–∞—Ç–Ω–∏–º
        boolean isSurrogate1 = Character.isSurrogate(ch1);
        System.out.println("'" + ch1 + "' —î —Å—É—Ä–æ–≥–∞—Ç–Ω–∏–º: " + isSurrogate1);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –ø–∞—Ä–∞ —Å–∏–º–≤–æ–ª—ñ–≤ —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é –ø–∞—Ä–æ—é
        boolean isSurrogatePair = Character.isSurrogatePair(highSurrogate1, lowSurrogate2);
        System.out.println("'" + highSurrogate1 + lowSurrogate2 + "' —î —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é –ø–∞—Ä–æ—é: " + isSurrogatePair);

        String str = "–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç–µ!";
        int index = 4;
        char highSurrogate = '\uD83D';
        char lowSurrogate = '\uDE00';

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Å—É—Ä–æ–≥–∞—Ç–Ω—É –ø–∞—Ä—É
        int codePoint = Character.toCodePoint(highSurrogate, lowSurrogate);
        System.out.println("–°—É—Ä–æ–≥–∞—Ç–Ω–∞ –ø–∞—Ä–∞: " + highSurrogate + lowSurrogate);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞: " + codePoint);

        //–ö–û–î–û–í–Ü –¢–û–ß–ö–ò
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—É –∑–∞ –∑–∞–¥–∞–Ω–æ—é –∫–æ–¥–æ–≤–æ—é —Ç–æ—á–∫–æ—é
        char character = Character.toChars(codePoint)[0];
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞: " + codePoint);
        System.out.println("–°–∏–º–≤–æ–ª: " + character);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥–æ–≤–æ—ó —Ç–æ—á–∫–∏ —Å–∏–º–≤–æ–ª—É –∑–∞ –ø–µ–≤–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º
        int codePointAt = Character.codePointAt(str, index);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó " + index + ": " + codePointAt);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥–æ–≤–æ—ó —Ç–æ—á–∫–∏ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –≤ —Ä—è–¥–∫—É
        int codePointAtIndex = Character.codePointAt(str, 7);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó 7: " + codePointAtIndex);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥–æ–≤–æ—ó —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ–≤–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º
        int codePointBefore = Character.codePointBefore(str, index);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∑–∏—Ü—ñ—î—é " + index + ": " + codePointBefore);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–¥–æ–≤–∏—Ö —Ç–æ—á–æ–∫ —É —Ä—è–¥–∫—É
        int codePointCount = Character.codePointCount(str, 0, str.length());
        System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥–æ–≤–∏—Ö —Ç–æ—á–æ–∫ —É —Ä—è–¥–∫—É: " + codePointCount);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∑–∞–¥–∞–Ω–∞ —Ç–æ—á–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—é –∫–æ–¥–æ–≤–æ—é —Ç–æ—á–∫–æ—é
        boolean isValidCodePoint = Character.isValidCodePoint(codePoint);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ " + codePoint + " —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é: " + isValidCodePoint);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∑–∞–¥–∞–Ω–∞ —Ç–æ—á–∫–∞ —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é –∫–æ–¥–æ–≤–æ—é —Ç–æ—á–∫–æ—é
        boolean isSupplementaryCodePoint = Character.isSupplementaryCodePoint(codePoint);
        System.out.println("–ö–æ–¥–æ–≤–∞ —Ç–æ—á–∫–∞ " + codePoint + " —î —Å—É—Ä–æ–≥–∞—Ç–Ω–æ—é: " + isSupplementaryCodePoint);

        // –ó–º—ñ—â–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –Ω–∞ –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥–æ–≤–∏—Ö —Ç–æ—á–æ–∫
        int offset = 2;
        int newIndex = Character.offsetByCodePoints(str, index, offset);
        System.out.println("–ù–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –ø—ñ—Å–ª—è –∑–º—ñ—â–µ–Ω–Ω—è –Ω–∞ " + offset + " –∫–æ–¥–æ–≤–∏—Ö —Ç–æ—á–æ–∫: " + newIndex);

        //–Ü–î–ï–ù–¢–ò–§–Ü–ö–ê–¢–û–†–ò
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é —á–∞—Å—Ç–∏–Ω–æ—é —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –≤ Java
        boolean isJavaIdentifierPart= Character.isJavaIdentifierPart(ch1);
        System.out.println(ch1 + " —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é —á–∞—Å—Ç–∏–Ω–æ—é —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –≤ Java: " + isJavaIdentifierPart);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º —Å–∏–º–≤–æ–ª–æ–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –≤ Java
        boolean isJavaIdentifierStart = Character.isJavaIdentifierStart(ch1);
        System.out.println(ch1 + " –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º —Å–∏–º–≤–æ–ª–æ–º —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –≤ Java: " + isJavaIdentifierStart);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é —á–∞—Å—Ç–∏–Ω–æ—é Unicode —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
        boolean isUnicodeIdentifierPart = Character.isUnicodeIdentifierPart(ch1);
        System.out.println(ch1 + " —î –¥–æ–ø—É—Å—Ç–∏–º–æ—é —á–∞—Å—Ç–∏–Ω–æ—é Unicode —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞: " + isUnicodeIdentifierPart);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º —Å–∏–º–≤–æ–ª–æ–º Unicode —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
        boolean isUnicodeIdentifierStart = Character.isUnicodeIdentifierStart(ch1);
        System.out.println(ch1 + " –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º —Å–∏–º–≤–æ–ª–æ–º Unicode —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞: " + isUnicodeIdentifierStart);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–∏–º–≤–æ–ª —î —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–º –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
        boolean isIdentifierIgnorable = Character.isIdentifierIgnorable(ch1);
        System.out.println(ch1 + " —î —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞: " + isIdentifierIgnorable);


    }
}
